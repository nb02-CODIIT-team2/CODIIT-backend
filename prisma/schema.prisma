// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   User
========================= */
model User {
  id            String              @id @default(cuid())
  nickname      String
  email         String             @unique
  passwordHash  String
  role          UserRole           @default(BUYER)
  image         String?     
  points        Int                @default(0)    // 현재 보유 포인트
  gradeLevel    GradeLevel         @default(GREEN)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?   
  
  sessions      Session[]                   
  store         Store?             @relation("StoreOwner") 
  favoriteStores FavoriteStore[]                 
  notifications Notification[]     @relation("UserNotifications")

  cart          Cart?                        
  orders        Order[]                        
  reviews       Review[]                       
  inquiries     Inquiry[]          @relation("InquiryAuthor") 
  answers       Answer[]           @relation("AnswerAuthor")                        
  pointLedger   PointTransaction[] // 포인트 사용/적립 내역              

  @@index([role])
  
}

// 회원 유형 (권한 분기: SELLER만 스토어/상품 관리 가능)
enum UserRole {
  BUYER
  SELLER
}

// 등급 레벨 (Green(신규) < Orange(10만) < Red(30만) < Black(50만) < VIP(100만))
enum GradeLevel {
  GREEN 
  ORANGE
  RED
  BLACK
  VIP
}

model Session {
  id           String         @id @default(cuid())
  userId       String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime    @default(now())

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  
  @@index([expiresAt])
}

/// 포인트 트랜잭션 (사용/적립 기록)
model PointTransaction {
  id        String            @id @default(cuid())
  userId    String
  delta     Int
  reason    String
  orderId   String?
  createdAt DateTime       @default(now())

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order?         @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([orderId])
}

/* =========================
   Store
========================= */
model Store {
  id             String              @id @default(cuid())
  name           String
  address        String
  detailAddress  String
  phoneNumber    String
  content        String
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  sellerId       Int
  seller         User             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  favorites      FavoriteStore[]
}

model FavoriteStore {
  id        String      @id @default(cuid())
  storeId   String
  userId    String
  createdAt DateTime @default(now())

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store  Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
}

/* =========================
   Cart
========================= */
model Cart {
  id        String      @id @default(cuid())
  userId    String      @unique 
  createdAt DateTime @default(now()) 
  updatedAt DateTime? 

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

}

model CartItem {
  id        String      @id @default(cuid())
  cartId    String      
  productId String      
  quantity  Int
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt      

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([cartId, productId])
}

/* =========================
   Product
========================= */
model Product {
  id                String   @id @default(cuid())
  storeId           String
  name              String
  content           String?
  image             String?
  price             Int
  discountPrice     Int?
  discountRate      Int?
  discountStartTime DateTime?
  discountEndTime   DateTime?
  sales             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  stocks     Stock[]
  reviews    Review[]
  inquiries  Inquiry[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Category {
  id       String   @id @default(cuid())
  name     CategoryType
  products Product[]
}

enum CategoryType {
  TOP
  BOTTOM
  DRESS
  OUTER
  SKIRT
  SHOES
  ACC
}

model Stock {
  id        String   @id @default(cuid())
  productId String
  size      SizeType
  quantity  Int

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum SizeType {
  Free
  XS
  S
  M
  L
  XL
}

/* =========================
   Order
========================= */
model Order {
  id          String   @id @default(cuid())
  userId      String
  storeId     String
  totalPrice  Int
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  store       Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  pointLogs   PointTransaction[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}

enum OrderStatus {
  PENDING     
  PAID        
  SHIPPED     
  DELIVERED   
  CANCELED    
}

/* =========================
   Notification
========================= */
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  SYSTEM_ALERT
}


