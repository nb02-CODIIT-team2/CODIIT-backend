// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  nickname      String
  email         String             @unique
  passwordHash  String
  role          UserRole           @default(BUYER)
  image         String?     
  points        Int                @default(0)    // 현재 보유 포인트
  gradeLevel    GradeLevel         @default(GREEN)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?   
  
  sessions      Session[]                   
  store         Store?             @relation("StoreOwner") 
  favoriteStores FavoriteStore[]                 
  notifications Notification[]     @relation("UserNotifications")

  cart          Cart?                        
  orders        Order[]                        
  reviews       Review[]                       
  inquiries     Inquiry[]          @relation("InquiryAuthor") 
  answers       Answer[]           @relation("AnswerAuthor")  
  addresses     Address[]                       
  pointLedger   PointTransaction[] // 포인트 사용/적립 내역              

  @@index([role])
  
}

// 회원 유형 (권한 분기: SELLER만 스토어/상품 관리 가능)
enum UserRole {
  BUYER
  SELLER
}

// 등급 레벨 (Green(신규) < Orange(10만) < Red(30만) < Black(50만) < VIP(100만))
enum GradeLevel {
  GREEN 
  ORANGE
  RED
  BLACK
  VIP
}

model Session {
  id           Int         @id @default(autoincrement())
  userId       Int
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime    @default(now())

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  
  @@index([expiresAt])
}

/// 포인트 트랜잭션 (사용/적립 기록)
model PointTransaction {
  id        Int            @id @default(autoincrement())
  userId    Int
  delta     Int
  reason    String
  orderId   Int?
  createdAt DateTime       @default(now())

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order?         @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([orderId])
}

model Store {
  id             Int              @id @default(autoincrement())
  name           String
  address        String
  detailAddress  String
  phoneNumber    String
  content        String
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  sellerId       Int
  seller         User             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  favorites      FavoriteStore[]
}

model FavoriteStore {
  id        Int      @id @default(autoincrement())
  storeId   Int
  userId    Int
  createdAt DateTime @default(now())

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store  Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
}
